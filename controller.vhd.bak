library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use work.SAD_Package.all;

entity Controller is
    Port ( CLK : in STD_LOGIC;
           RST : in STD_LOGIC;
           start_signal : in STD_LOGIC;
           cnt : in integer;
           calc_done : in STD_LOGIC;
           done_signal : out STD_LOGIC;
           enable : out STD_LOGIC);
end Controller;

architecture Behavioral of Controller is
    type state_type is (IDLE, START, DONE);
    signal state, next_state : state_type;
begin
    process(CLK, RST)
    begin
        if RST = '1' then
            state <= IDLE;
        elsif rising_edge(CLK) then
            state <= next_state;
        end if;
    end process;
    
    process(state, start_signal, cnt, calc_done)
    begin
        case state is
            when IDLE =>
                if start_signal = '1' then
                    next_state <= START;
                else
                    next_state <= IDLE;
                end if;
            when START =>
                if calc_done = '1' then
                    next_state <= DONE;
                else
                    next_state <= START;
                end if;
            when DONE =>
                next_state <= IDLE;
            when others =>
                next_state <= IDLE;
        end case;
    end process;
    
    process(state)
    begin
        case state is
            when IDLE =>
                enable <= '0';
                done_signal <= '0';
            when START =>
                enable <= '1';
                done_signal <= '0';
            when DONE =>
                enable <= '0';
                done_signal <= '1';
            when others =>
                enable <= '0';
                done_signal <= '0';
        end case;
    end process;
end Behavioral;

