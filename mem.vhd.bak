library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use work.SAD_Package.all;

entity Memory is
    Port ( CLK : in STD_LOGIC;
           RST : in STD_LOGIC;
           write_enable : in STD_LOGIC;
           read_enable : in STD_LOGIC;
           address : in integer;
           data_in : in STD_LOGIC_VECTOR(7 downto 0);
           data_out : out STD_LOGIC_VECTOR(7 downto 0));
end Memory;

architecture Behavioral of Memory is
    type mem_type is array (0 to size-1) of STD_LOGIC_VECTOR(7 downto 0);
    signal mem_data : mem_type := (others => (others => '0'));
begin
    process(CLK)
    begin
        if rising_edge(CLK) then
            if RST = '1' then
                mem_data <= (others => (others => '0'));
            elsif write_enable = '1' then
                mem_data(address) <= data_in;
            end if;
        end if;
    end process;
    
    process(CLK)
    begin
        if rising_edge(CLK) then
            if read_enable = '1' then
                data_out <= mem_data(address);
            else
                data_out <= (others => '0');
            end if;
        end if;
    end process;
end Behavioral;

